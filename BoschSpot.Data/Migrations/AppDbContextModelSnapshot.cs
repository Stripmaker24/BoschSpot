// <auto-generated />
using System;
using BoschSpot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoschSpot.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoschSpot.Models.AccountModel", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Accounts");

                    b
                        .HasComment("Accounts of the website");
                });

            modelBuilder.Entity("BoschSpot.Models.CategoryModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b
                        .HasComment("The different types of categories that a group can be part of");
                });

            modelBuilder.Entity("BoschSpot.Models.ContenderModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<bool>("IsInDanger")
                        .HasColumnType("bit");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RarityID")
                        .HasColumnType("int");

                    b.Property<string>("Recognition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("RarityID");

                    b.ToTable("Contenders");

                    b
                        .HasComment("The entities that can be spotted in the game");
                });

            modelBuilder.Entity("BoschSpot.Models.GroupsModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Groups");

                    b
                        .HasComment("Groups that a contender can be part of");
                });

            modelBuilder.Entity("BoschSpot.Models.RarityModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Rarities");

                    b
                        .HasComment("Rarity of the contenders");
                });

            modelBuilder.Entity("BoschSpot.Models.SpotModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ContenderID")
                        .HasColumnType("int");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<DateTime>("SpotTimeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ContenderID");

                    b.ToTable("Spot");
                });

            modelBuilder.Entity("BoschSpot.Models.ContenderModel", b =>
                {
                    b.HasOne("BoschSpot.Models.GroupsModel", "Groups")
                        .WithMany("Contenders")
                        .HasForeignKey("GroupID")
                        .HasConstraintName("ForeignKey_Group_Contender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoschSpot.Models.RarityModel", "Rarity")
                        .WithMany("Contenders")
                        .HasForeignKey("RarityID")
                        .HasConstraintName("ForeignKey_Rarity_Contender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("BoschSpot.Models.GroupsModel", b =>
                {
                    b.HasOne("BoschSpot.Models.CategoryModel", "Category")
                        .WithMany("Groups")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("ForeignKey_Category_Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BoschSpot.Models.SpotModel", b =>
                {
                    b.HasOne("BoschSpot.Models.AccountModel", "Account")
                        .WithMany("Spots")
                        .HasForeignKey("AccountID")
                        .HasConstraintName("ForeignKey_Account_Spot")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoschSpot.Models.ContenderModel", "Contender")
                        .WithMany("Spots")
                        .HasForeignKey("ContenderID")
                        .HasConstraintName("ForeignKey_Contender_Spot")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contender");
                });

            modelBuilder.Entity("BoschSpot.Models.AccountModel", b =>
                {
                    b.Navigation("Spots");
                });

            modelBuilder.Entity("BoschSpot.Models.CategoryModel", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("BoschSpot.Models.ContenderModel", b =>
                {
                    b.Navigation("Spots");
                });

            modelBuilder.Entity("BoschSpot.Models.GroupsModel", b =>
                {
                    b.Navigation("Contenders");
                });

            modelBuilder.Entity("BoschSpot.Models.RarityModel", b =>
                {
                    b.Navigation("Contenders");
                });
#pragma warning restore 612, 618
        }
    }
}
